{"version":3,"sources":["app/js/actions/BoardActions.js","app/js/app.js","app/js/components/Block.js","app/js/components/Board.js","app/js/components/Controls.js","app/js/constants/ActionTypes.js","app/js/containers/App.js","app/js/models/board.js","app/js/models/engine.js","app/js/models/helpers.js","app/js/reducers/board.js","app/js/reducers/controls.js","app/js/reducers/index.js","app/js/store/Store.js"],"names":["types","clear","CLEAR","flip","FLIP","reset","RESET","start","START","stop","STOP","store","UIkit","use","Icons","document","getElementById","onMouseEvent","on","Block","color","backgroundColor","propTypes","PropTypes","bool","func","isRequired","string","defaultProps","renderBlock","y","x","coordinates","current","renderRow","row","map","Board","data","BoardShape","arrayOf","Controls","handleClickReset","props","actions","handleClickToggle","controls","label","window","interval","setInterval","handleClickClear","clearInterval","PureComponent","object","BoardActions","App","board","state","dispatch","FALSE","makeBoard","blockState","size","r","makeEmptyBoard","helpers","getNeighbors","getPlots","getBlockState","reduce","a","b","process","neighbors","set","nextState","column","$y","i","offset","$x","getFixedKey","key","getKeys","keys","length","randomizer","Math","random","value","array","slice","BOARD_SIZE","DEFAULT","actionHandlers","payload","reducer","reducers","initialState"],"mappings":"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","file":"public/js/app.js","sourcesContent":["import { createAction } from 'redux-actions'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\nexport const clear = createAction(types.CLEAR)\r\nexport const flip = createAction(types.FLIP)\r\nexport const reset = createAction(types.RESET)\r\nexport const start = createAction(types.START)\r\nexport const stop = createAction(types.STOP)\r\n","import Icons from 'uikit/dist/js/uikit-icons';\nimport UIkit from 'uikit/dist/js/uikit'\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport Store from './store/Store'\n\nconst store = Store()\nUIkit.use(Icons);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('gameboard')\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst onMouseEvent = (flip, on) => () => {\n  flip(on)\n}\n\nconst Block = ({ on, flip, color }) => (\n  <div\n    className=\"board-block\"\n    onMouseDown={onMouseEvent(flip, on)}\n    style={{ backgroundColor: on ? color : null }}\n  />\n)\n\nBlock.propTypes = {\n  on: PropTypes.bool,\n  flip: PropTypes.func.isRequired,\n  color: PropTypes.string\n}\n\nBlock.defaultProps = {\n  on: false,\n  color: '#FFF'\n}\n\nexport default Block\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Block from './Block'\n\nconst renderBlock = (flip, y) => (on, x) => (\n  <Block\n    key={x}\n    on={on}\n    flip={on => flip({\n      coordinates: { y, x },\n      current: on\n    })}\n  />\n)\n\nconst renderRow = flip => (row, y) => (\n  <div className=\"board-row\" key={y}>\n    {row.map(renderBlock(flip, y))}\n  </div>\n)\n\nconst Board = ({ data, flip }) => (\n  <div className=\"board\">\n    {data.map(renderRow(flip))}\n  </div>\n)\n\nexport const BoardShape = PropTypes.arrayOf(\n  PropTypes.arrayOf(PropTypes.bool)\n)\n\nBoard.propTypes = {\n  data: BoardShape.isRequired,\n  flip: PropTypes.func.isRequired\n}\n\nexport default Board\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Controls extends PureComponent {\r\n  handleClickReset = () => {\r\n    this.stop()\r\n    this.props.actions.reset()\r\n  }\r\n\r\n  handleClickToggle = () => {\r\n    if (this.props.controls.label === 'STOP') {\r\n      this.stop()\r\n    } else {\r\n      if (this.props.controls.clear) {\r\n        this.props.actions.reset()\r\n      }\r\n      window.interval = window.setInterval(this.props.actions.start, 100)\r\n    }\r\n  }\r\n\r\n  handleClickClear = () => {\r\n    this.stop()\r\n    this.props.actions.clear()\r\n  }\r\n\r\n  stop = () => {\r\n    this.props.actions.stop()\r\n    clearInterval(window.interval)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"controls uk-button-group\">\r\n        <button\r\n          className=\"uk-button uk-button-default uk-margin-right\"\r\n          onClick={this.handleClickToggle}\r\n        >\r\n          {this.props.controls.label}\r\n        </button>\r\n        <button\r\n          className=\"uk-button uk-button-default uk-margin-right\"\r\n          onClick={this.handleClickReset}\r\n        >\r\n          RESET\r\n        </button>\r\n        <button\r\n          className=\"uk-button uk-button-default\"\r\n          onClick={this.handleClickClear}\r\n        >\r\n          CLEAR\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nControls.propTypes = {\r\n  actions: PropTypes.object.isRequired,\r\n  controls: PropTypes.object.isRequired\r\n}\r\n","export const CLEAR = 'CLEAR'\r\nexport const FLIP = 'FLIP'\r\nexport const RESET = 'RESET'\r\nexport const START = 'START'\r\nexport const STOP = 'STOP'\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as BoardActions from '../actions/BoardActions'\r\nimport Board, { BoardShape } from '../components/Board'\r\nimport Controls from '../components/Controls'\r\n\r\nconst App = props => (\r\n  <div>\r\n    <Board\r\n      data={props.board}\r\n      flip={props.actions.flip}\r\n    />\r\n    <Controls\r\n      actions={props.actions}\r\n      controls={props.controls}\r\n    />\r\n  </div>\r\n)\r\n\r\nApp.propTypes = {\r\n  actions: PropTypes.object.isRequired,\r\n  board: BoardShape.isRequired,\r\n  controls: PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(\r\n  state => ({ ...state }),\r\n  dispatch => ({ actions: bindActionCreators(BoardActions, dispatch) })\r\n)(App)\r\n","import { always, curry, range } from 'ramda'\r\n\r\nconst FALSE = always(false)\r\n\r\n/**\r\n * @desc returns a multidimensional array that respresents the game board\r\n * @param {function} blockState - function to determine block state\r\n * @return {array}\r\n */\r\nexport const makeBoard = curry((blockState, size) => {\r\n  const r = range(0, size)\r\n  return r.map(y => r.map(x => blockState(y, x)))\r\n})\r\n\r\nexport const makeEmptyBoard = makeBoard(FALSE)\r\n","import * as helpers from './helpers'\n\n/**\n * @desc gets the current count of neighbors for a designated block\n * @param {array} board - dataset representing the game board\n * @param {object} coordinates - coordinate pair to define block\n * @param {int} coordinates.y - y coordinate\n * @param {int} coordinates.x - x coordinate\n * @return {int}\n */\nexport const getNeighbors = (board, coordinates) =>\n  helpers.getPlots(coordinates)\n    .map(helpers.getBlockState(board))\n    .reduce((a, b) => a + b)\n\n/**\n * @desc determines block state based on its neighbors\n * @param {bool} on - designated state of block\n * @param {int} neighbors - number of neighbors\n * @return {bool}\n */\nexport const process = (on, neighbors) =>\n  on\n   ? neighbors >= 2 && neighbors <= 3\n   : neighbors === 3\n\n/**\n * @desc switches a blocks current state\n * @param {object} coordinates - coordinate pair to define block\n * @param {int} coordinates.y - y coordinate\n * @param {int} coordinates.x - x coordinate\n * @param {bool} current - designated state of block\n * @param {array} board - dataset representing the game board\n * @return {array}\n */\nexport const flip = ({ y, x }, current, board) =>\n  helpers.set(y, helpers.set(x, !current, board[y]), board)\n\n/**\n * @desc performs process methods on each block and returns a new board state\n * @param {array} board - dataset representing the game board\n * @return {array}\n */\nexport const nextState = board =>\n  board.map((row, y) =>\n    row.map((column, x) =>\n      process(column, getNeighbors(board, { y, x }))\n    )\n  )\n","/**\n * @desc returns an array arrays of neighboring plots from provided coordinates\n * @param {object} coordinates - coordinate pair to define block\n * @param {int} coordinates.y - y coordinate\n * @param {int} coordinates.x - x coordinate\n * @return {array}\n */\nexport const getPlots = ({ y, x }) =>\n    [-1, 0, 1].reduce((a, $y, i, offset) =>\n      offset.reduce((b, $x) =>\n        ($x || $y) ? [...b, [y + $y, x + $x]] : b,\n        a\n      ),\n      []\n    )\n\n/**\n * @desc returns appropriate index keys\n * @param {int} size - length of board array\n * @param {int} key - index value of board array\n * @return {array}\n */\nexport const getFixedKey = size => (key) => {\n  if (key === -1) { return size - 1 }\n  if (key === size) { return 0 }\n  return key\n}\n\n/**\n * @desc returns array of corrected keys\n * @param {int} size - length of board array\n * @param {array} keys - coordinate pair to define block\n * @return {array}\n */\nexport const getKeys = (size, keys) =>\n  keys.map(getFixedKey(size))\n\n/**\n * @desc returns value from index position\n * @param {array} board - dataset representing the game board\n * @param {array} coordinates - coordinate pair to define block\n * @return {bool}\n */\nexport const getBlockState = board => coordinates =>\n  (([y, x]) => board[y][x])(getKeys(board.length, coordinates)) || false\n\n/**\n * @desc returns a randomized boolean value\n * @param {int} y - coordinate from multidimensional array\n * @param {int} x - coordinate from multidimensional array\n * @return {bool}\n */\nexport const randomizer = (y, x) => Math.random(x + y) < 0.33\n\n/**\n * @desc creates an immutable array of arrays with new row replacement\n * @param {int} i - index of value\n * @param {array} value - value to set\n * @param {array} array - intial array of arrays\n * @return {array}\n */\nexport const set = (i, value, array) => [\n  ...array.slice(0, i),\n  value,\n  ...array.slice(i + 1)\n]\n","import { handleActions } from 'redux-actions'\r\nimport * as types from '../constants/ActionTypes'\r\nimport { flip, nextState } from '../models/engine'\r\nimport { makeBoard, makeEmptyBoard } from '../models/board'\r\nimport { randomizer } from '../models/helpers'\r\n\r\nconst BOARD_SIZE = 30\r\nconst DEFAULT = makeBoard(randomizer, BOARD_SIZE)\r\nconst actionHandlers = {\r\n  [types.CLEAR]: () => makeEmptyBoard(BOARD_SIZE, BOARD_SIZE),\r\n  [types.FLIP]: (state, { payload }) =>\r\n    flip(payload.coordinates, payload.current, state),\r\n  [types.RESET]: () => makeBoard(randomizer, BOARD_SIZE),\r\n  [types.START]: nextState\r\n}\r\n\r\nexport default handleActions(actionHandlers, DEFAULT)\r\n","import { handleActions } from 'redux-actions'\nimport * as types from '../constants/ActionTypes'\n\nconst DEFAULT = {\n  label: 'START',\n  clear: false\n}\n\nconst actionHandlers = {\n  [types.CLEAR]: state => ({\n    ...state,\n    label: 'START',\n    clear: true\n  }),\n  [types.RESET]: state => ({\n    ...state,\n    label: 'START',\n    clear: false\n  }),\n  [types.START]: state => ({\n    ...state,\n    label: 'STOP',\n    clear: false\n  }),\n  [types.STOP]: state => ({\n    ...state,\n    label: 'START',\n    clear: false\n  })\n}\n\nexport default handleActions(actionHandlers, DEFAULT)\n","import { combineReducers } from 'redux'\r\nimport board from './board'\r\nimport controls from './controls'\r\n\r\nconst reducer = combineReducers({\r\n  board,\r\n  controls\r\n})\r\n\r\nexport default reducer\r\n","import { createStore } from 'redux'\nimport reducers from '../reducers'\n\n/**\n * @desc returns the applications store\n * @param {object} intialState - default dataset for the application store\n * @return {object}\n */\nexport default initialState =>\n  createStore(reducers, initialState)\n"]}